generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id           Int          @id @default(autoincrement())
  nom          String
  prenom       String
  email        String   @unique
  telephone    String
  ville        String   @default("") // Ensure this field exists
  codePostal   String   @default("") // Ensure this field exists
  gouvernorat  String   @default("") // Ensure this field exists
  motDePasse   String
  role         String   @db.VarChar(10)
  inscritLe    DateTime @default(now())
  statut       String   @default("actif")
  emailVerified   Boolean   @default(false)
  verificationToken String?  @unique
  verificationTokenExpires DateTime?

  client       Client?
  admin        Admin?
  avis         Avis[]
  notification Notification[]
  chatbot      Chatbot?
  resetTokens  ResetToken[]
  messageries  Messagerie[]
}

model Client {
  id              Int      @id
  soldePoints     Int      @default(0)
  historiqueAchats Json?    @default("[]")   
  historiquePoints Json?    @default("[]")
  utilisateur     Utilisateur @relation(fields: [id], references: [id], onDelete: Cascade)
  panier          Panier[]
  commande        Commande[]
  produitsAchetes Produit[] @relation("ClientsAcheteurs") // Relation inverse ajoutée
}

model Admin {
  id          Int      @id
  utilisateur Utilisateur @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Avis {
  id            Int       @id @default(autoincrement())
  date          DateTime  @default(now())
  note          Int
  commentaire   String?
  utilisateur   Utilisateur @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)
  utilisateur_id Int
  produit       Produit?   @relation(fields: [produit_id], references: [id])
  produit_id    Int?
  @@unique([utilisateur_id, produit_id], name: "utilisateur_id_produit_id")
}

model Notification {
  id            Int      @id @default(autoincrement())
  message       String
  dateEnvoi     DateTime @default(now())
  statut        String   @db.VarChar(20) @default("non lu")
  utilisateur   Utilisateur @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)
  utilisateur_id Int
}

model Chatbot {
  id            Int      @id @default(autoincrement())
  utilisateur   Utilisateur @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)
  utilisateur_id Int      @unique
}

model Panier {
  id            Int      @id @default(autoincrement())
  date          DateTime
  total         Float    @default(0)
  remise        Float    @default(0) // Ajoutez cette ligne
  livrerDomicile Boolean @default(false)
  client        Client   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id     Int
  lignePanier   LignePanier[]
  commande      Commande[]
}

model Produit {
  id          Int      @id @default(autoincrement())
  designation String   @default("Désignation par défaut")
  description String?
  images      String[]
  qteStock    Int
  prix        Float
  nbrPoint    Int      // Ce champ doit exister
  seuilMin    Int
  deleted     Boolean  @default(false)
  lignePanier   LignePanier[]
  avis          Avis[]    
  clientsAcheteurs Client[] @relation("ClientsAcheteurs")
}

model LignePanier {
  id            Int      @id @default(autoincrement())
  prix          Float
  qteCmd        Int
  sousTotal     Float
  panier        Panier   @relation(fields: [panier_id], references: [id], onDelete: Cascade)
  panier_id     Int
  produit       Produit  @relation(fields: [produit_id], references: [id], onDelete: Cascade)
  produit_id    Int
}

model Commande {
  id              Int      @id @default(autoincrement())
  total           Float
  remise          Float
  pourcentageRemise Float?  
  montantPoint    Float
  montantLivraison Float
  montantAPayer   Float
  dateLivraison   DateTime
  pointsGagnes    Int     
  pointsUtilises  Int    

  client        Client   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  client_id     Int
  panier        Panier   @relation(fields: [panier_id], references: [id], onDelete: Cascade)
  panier_id     Int
  livraison     Livraison[]
  paiement      Paiement?  
}

model Livraison {
  id              Int      @id @default(autoincrement())
  date            DateTime
  nomLivreur      String
  statutLivraison String @db.VarChar(50)
  detailPaiement  String
  commande        Commande @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  commande_id     Int      @unique
}
model Messagerie {
  id             Int        @id @default(autoincrement())
  contenu        String
  date_envoi     DateTime   @default(now())
  lu             Boolean    @default(false)
  utilisateur    Utilisateur @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)
  utilisateur_id Int
  parent_message_id Int?
  parentMessage  Messagerie? @relation("ParentMessage", fields: [parent_message_id], references: [id])
  replies        Messagerie[] @relation("ParentMessage")
  
  @@index([utilisateur_id])
  @@index([parent_message_id])
}

model ResetToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  utilisateur_id Int
  utilisateur   Utilisateur @relation(fields: [utilisateur_id], references: [id], onDelete: Cascade)
  expiresAt     DateTime
}
model Paiement {
  id            Int      @id @default(autoincrement())
  montant       Float
  methode       String   @default("espece")
  detailsCarte  Json?    @default("{}")
  statut        String   @default("en_attente")
  date          DateTime @default(now())
  commande      Commande @relation(fields: [commande_id], references: [id])
  commande_id   Int      @unique
}
